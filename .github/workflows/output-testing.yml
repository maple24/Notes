name: Output testing

env:
  TEMP_FOLDER: /tmp/map_release_validation
  RECORDINGS_INGOLSTADT: >-
    [
    "mdm://228daa0c1f80e7cf62b2905e5dbcc343a3253b0aa2bfe3e5d3c1e9be1fcd7b68"
    ]
  RECORDINGS_FEUERBACH: >-
    [
    "mdm://98313850cfec2a9ef1476f47963beaf722ea0d77807901906db933a71bbeac9e"
    ]
  RECORDINGS_NONE: "[]"

on:
  workflow_dispatch:
    inputs:
      map_request_ticket_number:
        description: |
          The ticket number of the map request ticket.
          It will be used for the created branch when adapting the release JSON.
        type: "string"
        required: true
        default: "123"
      map_mdm_sha:
        description: |
          MDM SHA of the map to be tested. This can not be combined with the map_region and map_type field.
        type: "string"
        required: true
        default: "456"
      should_tag_release:
        description: |
          Check if you want the release to be tagged with the `released` tag if validation succeeds.
          This can only be used together with map_mdm_sha.
        type: "boolean"
        default: true
        required: true
      predefined_recording_set:
        description: |
          Select a set of recordings for which a recompute should run with the given map."
        type: "choice"
        default: "INGOLSTADT"
        options:
          - "INGOLSTADT"
          - "FEUERBACH"
          - "NONE"
      additional_recordings:
        description: >
          Define additional recordings to be used for recompute in the format
          "mdm://SHA","mdm://otherSHA" as comma separated list.

          The defined recordings in this parameter will be used in addition to the selected
          predefined_recording_set above.
        type: "string"
        default: ""
jobs:
    job1:
      runs-on: ubuntu-latest
      # Map a step output to a job output
      outputs:
        output1: ${{ steps.step1.outputs.test }}
        output2: ${{ steps.step2.outputs.test }}
      steps:
        - id: step1
          run: echo "test=hello" >> "$GITHUB_OUTPUT"
        - id: step2
          run: echo "test=world" >> "$GITHUB_OUTPUT"
        - name: step3
          id: job_variables
          shell: bash
          run: |
            echo "map_request_ticket_number=${{ github.event.inputs.map_request_ticket_number }}" >> $GITHUB_OUTPUT
            echo "map_mdm_sha=${{ github.event.inputs.map_mdm_sha }}" >> $GITHUB_OUTPUT
            echo "should_tag_release=${{ github.event.inputs.should_tag_release }}" >> $GITHUB_OUTPUT
            echo "predefined_recording_set=RECORDINGS_${{ github.event.inputs.predefined_recording_set }}" \
              >> $GITHUB_OUTPUT
            echo "additional_recordings=${{ github.event.inputs.additional_recordings }}" >> $GITHUB_OUTPUT
        - name: step3
          id: calculate_recording_lists
          run: |
            echo "recording_list<<EOF" >> $GITHUB_OUTPUT
            echo '${{ env[steps.job_variables.outputs.predefined_recording_set] }}' | \
              jq '. += [${{ steps.job_variables.outputs.additional_recordings }}]' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
        - name: "Validate should tag release parameter"
          if: ${{ steps.job_variables.outputs.should_tag_release }}
          run: |
            echo '${{ steps.calculate_recording_lists.outputs.recording_list }}'
            map_mdm_sha="${{ steps.job_variables.outputs.map_mdm_sha }}"
        # - name: "Assemble configurations"
        #   id: assemble_config
        #   run: |
        #     easy_eval=$(echo '{}' | \
        #       jq '.blocking=true
        #       | .name="Localizer_Horizon_Smoke_Test"
        #       | .test_files=["tests/component/roadgraph/map_sensor_validation/map_release_test.py"]')

        #     job_config_base=$(echo '{}' | \
        #       jq --argjson easy_eval "$easy_eval" \
        #       '.rate=0
        #       | .ros_bagfile_migrate=true
        #       | .simulation_node_skip_build=true
        #       | .post_evaluation=[
        #         $easy_eval
        #       ]
        #       | .aos_activity_positive_list=[
        #         "roscore",
        #         "mvp_roudi",
        #         "mvp_roudi_ros_measurement_gateway",
        #         "horizon_transformer",
        #         "horizon_reconstructor",
        #         "landmark_localization",
        #         "landmark_localization_local_map_provider"
        #       ]')

        #     map_file=$(echo "{}" | \
        #         jq '.mdm_sha="${{ steps.job_variables.outputs.map_mdm_sha }}"')

        #     job_configs=$(echo '${{ steps.calculate_recording_lists.outputs.recording_list }}' | \
        #       jq --argjson base "$job_config_base" \
        #       --argjson map_file "$map_file" \
        #       '[ .[]
        #         | {
        #             datafile: .,
        #             map_file: $map_file,
        #             out_directory: "${{ env.TEMP_FOLDER }}/out"
        #           }
        #         | $base + . ]')
        #     echo "job_configs<<EOF" >> $GITHUB_OUTPUT
        #     echo "$job_configs" >> $GITHUB_OUTPUT
        #     echo "EOF" >> $GITHUB_OUTPUT
    job2:
      runs-on: ubuntu-latest
      needs: job1
      steps:
        - env:
            OUTPUT1: ${{needs.job1.outputs.output1}}
            OUTPUT2: ${{needs.job1.outputs.output2}}
          run: echo "$OUTPUT1 $OUTPUT2"
